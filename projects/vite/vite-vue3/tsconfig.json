{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "strict": true,
    "jsx": "preserve",
    // 从 Vue 3.4 开始，Vue 不再隐式注册全局JSX命名空间。要指示 TypeScript 使用 Vue 的 JSX 类型定义，请确保在您的 中包含以下内容tsconfig.json
    "jsxImportSource": "vue",
    "sourceMap": true,
    "resolveJsonModule": true,
    // 将每个文件作为单独的模块, 确保我的程序代码可以被不进行任何类型检查的编译器(babel)正确地编译
    // 在vite的项目中必须开启
    // 1. 导入的类型, 再通过export { typeFn }
    // 2. 开启后会在使用const enum 语法时提示报错。 因为vite使用esbuild编译ts，不支持该语法
    // 3. 开启isolatedModules后, 要求所有单个ts文件是一个独立的模块, 必须使用export导出
    "isolatedModules": true,
    // 开启AMD和commonjs的模块兼容, 即 export =
    "esModuleInterop": true,
    // 跳过类型声明文件检查
    "skipLibCheck": true,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    }
  },
  // 搜索d.ts文件的路径
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "src/**/*",
    "plugins"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}