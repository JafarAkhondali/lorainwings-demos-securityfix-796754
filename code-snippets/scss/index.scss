// maps
$color: (
  red: #fa0000,
  yellow: #fbe200,
  blue: #95d7eb
);
// maps取值, 当取不到就是空值
.content {
  color: map-get($color, yellow);
  // 编译结果是空
  background-color: map-get($color, blue);
}

$color1: #333;
//如果$co1or之前没定义就使用如下的里默认值, 已定义就采用定义值
$color1: #666 !default;
.container {
  border-color: $color1;
}

@mixin flex-align($aitem, $left: 0) {
  -webkit-box-align: $aitem;
  -webkit-align-items: $aitem;
  -ms-flex-align: $aitem;
  align-items: $aitem;
  margin-left: $left;
}
// 剩余参数扩展符
@mixin linear-gradients($direction, $gradients...) {
  background-color: nth($gradients, 1);
  background-image: linear-gradients($direction, $gradients);
}

.container {
  // @include flex-align($aitem: center) 指定参数传参
  @include flex-align(center);
  // 传递多个参数
  @include linear-gradients(to right, red, orange, yellow);
}

$theme: 1;
$light: true;
.container {
  @if $theme == 1 {
    background-color: red;
  } @else {
    background-color: blue;
  }

  @if $light == true {
    color: #fff;
  } @else {
    color: black;
  }
}

$width: 100;
$height: 200;
$last: false;
div {
  @if $width > 50 and $height < 300 {
    font-size: 16px;
  } @else {
    font-size: 14px;
  }

  @if not $last {
    border-color: red;
  } @else {
    border-color: blue;
  }
}

.content {
  width: 10 * 20; // 200
  width: 5 * 10%; // 50%
  // width: 50% * 10%; // 报错, 出现两个%, 相同单位无法运算
  // width: 10px * 20px; // 报错, 出现两个px, 相同单位无法运算
  //  width: 50% * 10px; // 报错, 单位无法转换
  width: 10px * 2; // 20px
  width: 10pt * 10;
}

.container {
  content: 'foo' + bar;
  content: foo + 'bar';
  content: 'foo' + 'bar';
  content: foo + bar;
}

$class-name: danger;
$attr: color;
$author: 'lorain';
$font-size: 12px;
$line-height: 30px;
/*
  这是文件说明部分
  @author: #{$author}
*/
a.#{$class-name} {
  border-#{$attr}: #f00;
}

p {
  // 这种写法就不会运算, 使得结果为需要的联合值 12px / 30px
  font: #{$font-size} / #{$line-height} Helvetica;
}

p {
  height: 30px;
}

.p0 {
  background-color: #5c7a29;
}

.p1 {
  /*
    让颜色变亮
    lighten($color,Samount)
    $amount的取值在0%-100%之间
  */
  background-color: lighten(#5c7a29, 30%);
}
.p2 {
  /*
    让颜色变暗 通常使用color.scale()代替该方案
  */
  background-color: darken(#5c7a29, 15%);
}
.p3 {
  /*
    降低颜色透明度 通常使用color.sca1e()代替该方案
    background-color:opacify(#5c7a29, 0.5);
  */
  background-color: opacify(rgba(#5c7a29, 0.1), 0.5);
}

p {
  &:after {
    content: quote(这是里面的内容); // 给字符串添加引号
  }
  background-color: unquote($string: '#F00'); // 去掉字符串引号
  z-index: str-length('sass学习');
}

.container {
  content: 'foo' + bar; // "foobar";
  content: foo + 'bar'; // foobar;
  content: 'foo' + 'bar'; // "foobar";
  content: foo + bar; // foobar;
  content: '' + selector-append('.a', '.b', '.c'); // '.a.b.c'
  content: selector-append('.a', '.b', '.c') + ''; // '.a.b.c'
}

/*---------------------------------*/

@for $i from 1 to 6 {
  #loading span:nth-child(#{$i}) {
    left: 20 * ($i - 1) + px;
    animation-delay: 0.2 * ($i - 1) + s;
  }
}

/*---------------------------------*/

@for $i from 1 to 6 {
  #loading span:nth-child(#{$i}) {
    left: 20 * ($i - 1) + px;
    // animation-delay: 0.2 * ($i - 1) + s;
    animation-delay: unquote(
      $string:
        '0.' +
        (
          $i - 1
        ) *
        2 +
        s
    );
  }
}

/*---------------------------------*/

$color-list: red green blue purple black;
@each $color in $color-list {
  // 取下标, List是从1开始的
  $index: index($color-list, $color);
  .p#{$index - 1} {
    background-color: $color;
  }
}

/*---------------------------------*/

$column: 12;
@while $column > 0 {
  .col-sm-#{$column} {
    // width: $column / 12 * 100%;
    //width: $column / 12 * 100 + %;
    // width: $column / 12 * 100#{'%'};
    width: unquote($string: $column / 12 * 100 +'%');
  }
  $column: $column - 1;
}

/*---------------------------------*/

$theme: 'light';
.container {
  @if $theme == 'light' {
    color: #000;
  } @else {
    color: #fff;
  }
}
/* 三元条件函数来改写 */
.container {
  color: if($theme == 'light', #000, #fff);
}

/*-----------------------------------*/
$_private-color: #1ab394;
$colors: (
  red: #f00,
  yellow: yellow,
  green: green
);

@mixin base {
  width: 100px;
}

@function get-properity($key: red) {
  @return map-get($colors, $key);
}

.content {
  // 使用引入的mixin
  @include base;
  color: get-properity(yellow);
  font-size: $font-size;
}

.block {
  width: 1000px;
  &__element {
    font-size: 12px;
    &--modifier {
      font-size: 16px;
    }
  }
  &--modifier {
    font-size: 14px;
  }
}

/*------------------------*/

@supports (display: flex) {
  .parent {
    font-size: 14px;
    // 跳出supports, 不跳出父元素
    @at-root (without: supports) {
      .child {
        font-size: 12px;
        .son {
          color: red;
        }
      }
    }
  }
}

@supports (display: flex) {
  .parent {
    font-size: 14px;
    // 不跳出supports, 跳出父元素, 跟@at-root效果一样
    @at-root (with: supports) {
      .child-1 {
        font-size: 12px;
        .son-1 {
          color: red;
        }
      }
    }
  }
}

/*--------------*/

/*跳出media嵌套，父级有效*/
@media print {
  .parent2 {
    color: #f00;
    @at-root (without: media) {
      .child2 {
        width: 200px;
      }
    }
  }
}

/*--------------*/
@mixin dark-theme {
  @at-root .dark-theme & {
    @content;
  }
}

.btn {
  background: transparent;

  &:hover {
    background: grey;
  }

  @include dark-theme {
    background-image: linear-gradient(cornflowerblue, rebeccapurple);
  }
}

/*---------------------*/

$btnColors: #409eff, #67c23a, #e39827, #f54343, #6c6d71;
@each $c in $btnColors {
  $index: index($btnColors, $c);
  .btn.type-#{$index} {
    $color: $c;
    background: $color;
    color: #fff;
    &:hover {
      background: lighten($color, 10%);
    }
    &:active {
      background: darken($color, 10%);
    }
    &:disabled {
      background: lighten($color, 20%);
      color: lighten($color, 40%);
    }
  }
}

.main {
  float: left;
  width: 45em;

  @media (max-width: 480px) {
    & {
      float: none;
      width: 100%;
    }
  }
}

.main {
  float: left;
  width: 45em;

  & {
    @media (max-width: 480px) {
      float: none;
      width: 100%;
    }
  }
}

.block {
  &__element {
    color: red;
  }
  &--modifier {
    font-size: 10px;
  }
}

a {
  font-weight: bold;
  text-decoration: none;
  &:hover {
    text-decoration: underline;
  }
  body.firefox & {
    font-weight: normal;
  }
}

.parent {
  .child-1 & {
    font-size: 10px;
  }
  .child-2 & {
    font-size: 10px;
  }
  .child-3 & {
    font-size: 10px;
  }
}

/*------------------------*/

// 第一种情况等同于第二种情况
.block {
  width: 1000px;

  &__element {
    font-size: 12px;
    &--modifier {
      font-size: 16px;
    }
  }

  &--modifier {
    font-size: 14px;
  }
}

// 第二种情况
.block {
  width: 1000px;
  @at-root #{&}__element {
    font-size: 12px;
    @at-root #{&}--modifier {
      font-size: 16px;
    }
  }
  @at-root #{&}--modifier {
    font-size: 14px;
  }
}

/*------------------*/

// 定义一个变量map
$themes: (
  light: (
    bgColor: #fff,
    textColor: #000,
    btnColor: #1ab394
  ),
  dark: (
    bgColor: #000,
    textColor: #ddd,
    btnColor: #133add
  )
);

// 定义一个 useTheme 混入
$currentTheme: light;
@mixin useTheme {
  @each $tk, $tv in $themes {
    $currentTheme: $tk !global;
    html[data-theme='#{$tk}'] & {
      @content;
    }
  }
}

// 定义一个取变量值函数
@function getVars($properity) {
  $themeMap: map-get($themes, $currentTheme);
  @return map-get($themeMap, $properity);
}

// 实际使用
.home {
  @include useTheme {
    background-color: getVars('bgColor');
    color: getVars('textColor');
    .button {
      background: getVars('btnColor');
    }
  }
}

/*-------------------*/
$adaptList: (
  phone: (
    320px,
    480px
  ),
  pad: (
    481px,
    768px
  ),
  notebook: (
    769px,
    1024px
  ),
  desktop: (
    1025px,
    1200px
  ),
  tv: 1201px
);

@mixin useMediaQuery($device) {
  $sizes: map-get($adaptList, $device);
  @if type-of($sizes) == 'list' {
    $min: nth($sizes, 1);
    $max: nth($sizes, 2);
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @media (min-width: $sizes) {
      @content;
    }
  }
}

// 使用方式
.header {
  color: #ddd;
  @include useMediaQuery('phone') {
    font-size: 12px;
  }
  @include useMediaQuery('pad') {
    font-size: 14px;
  }
  @include useMediaQuery('notebook') {
    font-size: 16px;
  }
  @include useMediaQuery('tv') {
    font-size: 20px;
  }
}

/*-------------------------*/

@function getShadows($n) {
  $shadows: '#{random(100)}vw #{random(100)}vh #fff';
  @for $i from 2 through $n {
    $shadows: '#{$shadows}, #{random(100)}vw #{random(100)}vh #fff';
  }
  @return unquote($shadows);
}

// 页面使用星星函数生成多个星星
.layer1 {
  // 1-100随机数
  // $size: unquote('#{random(100)}px');
  $size: 1px;
  $duration: 100s;
  position: fixed;
  width: $size;
  height: $size;
  border-radius: 50%;
  left: 0;
  top: 0;
  box-shadow: getShadows(1000);
  animation: moveUp $duration linear infinite;
  &::after {
    content: '';
    position: fixed;
    left: 0;
    top: 100vh;
    width: $size;
    height: $size;
    border-radius: inherit;
    box-shadow: inherit;
  }
}

@keyframes moveUp {
  100% {
    transform: translateY(-100vh);
  }
}
